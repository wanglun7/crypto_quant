name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: crypto_quant_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d crypto_quant_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run ruff linting
      run: |
        poetry run ruff check crypto_quant/ tests/ demo_pipeline.py
        poetry run ruff format --check crypto_quant/ tests/ demo_pipeline.py

    - name: Run mypy type checking
      run: poetry run mypy crypto_quant/

    - name: Run unit tests
      run: poetry run pytest tests/ crypto_quant/ -v --tb=short

    - name: Run integration tests
      env:
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/crypto_quant_test
      run: poetry run pytest tests/test_integration_pipeline.py -v --tb=short

    - name: Test demo pipeline import
      run: poetry run python -c "import demo_pipeline; print('Demo pipeline imports successfully')"